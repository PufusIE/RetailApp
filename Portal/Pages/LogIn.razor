// This is the test learning page that will be deleted

@page "/login"
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

@using Portal.Authentication
@using Portal.Models

<h3>Log In</h3>

@if (showAuthError)
{
    <div class="alert alert-danger" role="alert">
        <p>@authErrorText</p>
    </div>
}

<EditForm Model="model" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-6">
            <InputText id="email" class="form-control" @bind-Value="model.Email" />
            <ValidationMessage For="(() => model.Email)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-6">
            <InputText type="password" id="password" class="form-control" @bind-Value="model.Password" />
            <ValidationMessage For="(() => model.Password)" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Log In</button>
        </div>
    </div>

</EditForm>

@code {
    private AuthenticationUserModel model = new();

    private bool showAuthError = false;
    private string authErrorText = "";

    private async Task ExecuteLogin()
    {
        showAuthError = false;

        var result = await AuthService.LoginAsync(model);

        if (result is not null)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            authErrorText = "There was an error when trying to log in.";
            showAuthError = true;
        }
    }
}
