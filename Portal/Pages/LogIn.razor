@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

<EditForm Model="model" OnValidSubmit="ExecuteLogin">
    
    <div class="row">
        <div class="col-auto">
            <label for="email" class="visually-hidden">Email</label>
            <InputText id="email" class="form-control" @bind-Value="model.Email" placeholder="Email Address"/>
        </div>

        <div class="col-auto">
            <label for="password" class="visually-hidden">Password:</label>
            <InputText type="password" id="password" class="form-control" @bind-Value="model.Password" placeholder="Password"/>
        </div>

        <div class="col-auto">
            <button type="submit" class="btn btn-success">Log In</button>
        </div>

        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="RegisterUser">Register</button>
        </div>
    </div>

</EditForm>

@code {
    private AuthenticationUserModel model = new();

    private bool showAuthError = false;
    private string authErrorText = "";

    private void RegisterUser()
    {
        NavManager.NavigateTo("/register");
    }

    private async Task ExecuteLogin()
    {
        showAuthError = false;

        AuthenticatedUserModel result = await AuthService.LoginAsync(model);

        if (result is not null)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            authErrorText = "There was an error when trying to log in.";
            showAuthError = true;
        }
    }
}
